stages:
  - login
  - build-push
  - deploy-to-eks

variables:
  ECR_REPOSITORY: backend

docker-login:
  stage: login
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    - aws sts get-caller-identity
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  only:
    - main

build-push:
  stage: build-push
  image: docker:20.10.16
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker build -t $ECR_REPOSITORY:$CI_COMMIT_SHORT_SHA .
    - docker tag $ECR_REPOSITORY:$CI_COMMIT_SHORT_SHA $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY:$CI_COMMIT_SHORT_SHA
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY:$CI_COMMIT_SHORT_SHA
  only:
    - main
  dependencies:
    - docker-login

deploy-to-eks:
  stage: deploy-to-eks
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variables:
    CLUSTER_NAME: stagging-cluster
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION

    - aws eks update-kubeconfig --name $CLUSTER_NAME

    - kubectl get nodes

    - kubectl set image deployment/my-app my-container=$IMAGE_NAME --record

    - kubectl rollout status deployment/my-app
  only:
    - main
  dependencies:
    - build-push


